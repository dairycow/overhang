name: Deploy to Production

on:
  # push:
  #   branches: [main]
  workflow_dispatch:  # Allow manual triggers

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./packages/backend
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run linting with tox
        working-directory: ./packages/backend
        run: |
          tox -e lint

      - name: Run type checking with tox
        working-directory: ./packages/backend
        run: |
          tox -e type

      - name: Run tests with tox
        working-directory: ./packages/backend
        run: |
          tox -e py311

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './packages/frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./packages/frontend
        run: npm ci

      - name: Run type checking
        working-directory: ./packages/frontend
        run: npx tsc --noEmit

      - name: Run tests
        working-directory: ./packages/frontend
        run: npm test

      - name: Build
        working-directory: ./packages/frontend
        run: npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -e
            cd /root/overhang

            echo "Pulling latest changes..."
            git pull origin main

            echo "Building and restarting services..."
            docker-compose up -d --build

            echo "Waiting for services to be ready..."
            sleep 10

            echo "Pruning old images..."
            docker image prune -f

            echo "Deployment complete!"
            docker-compose ps

      - name: Health Check
        run: |
          sleep 10
          curl -f https://overhang.au/health || exit 1

      - name: Notify on Failure
        if: failure()
        run: |
          echo "Deployment failed! Check logs at: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
